<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="Sample">

	<typeAlias  alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias  alias="searchVO" type="egovframework.example.sample.service.SampleDefaultVO"/>
	<typeAlias  alias="actorVO" type="movreview.service.ActorVO"/>
	<typeAlias  alias="collectionVO" type="movreview.service.CollectionVO"/>
	<typeAlias  alias="memberVO" type="movreview.service.MemberVO"/>
	<typeAlias  alias="movieVO" type="movreview.service.MovieVO"/>
	<typeAlias  alias="actorSnsVO" type="movreview.service.ActorSnsVO"/>
	<typeAlias  alias="reviewVO" type="movreview.service.ReviewVO"/>
	<typeAlias  alias="likeVO" type="movreview.service.LikeVO"/>
	<typeAlias  alias="genreVO" type="movreview.service.GenreVO"/>
	<typeAlias  alias="logVO" type="movreview.service.LogVO"/>
	
	<resultMap id="sample" class="egovframework.example.sample.service.SampleVO">
		<result property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="description" column="description"/>
		<result property="useYn" column="use_yn"/>
		<result property="regUser" column="reg_user"/>
	</resultMap>

	<insert id="sampleDAO.insertSample">
		<![CDATA[
			INSERT INTO SAMPLE 
				( ID
				  , NAME
				  , DESCRIPTION
				  , USE_YN
				  , REG_USER )
			VALUES ( #id#
				  , #name#
				  , #description#
				  , #useYn#
				  , #regUser# )
		]]>
	</insert>
	
	<update id="sampleDAO.updateSample">
		<![CDATA[
			UPDATE SAMPLE
			SET ID=#id#
				, NAME=#name#
				, DESCRIPTION=#description#
				, USE_YN=#useYn#
			WHERE ID=#id#
		]]>
	</update>
	
	<delete id="sampleDAO.deleteSample">
		<![CDATA[
			DELETE FROM SAMPLE 
			WHERE ID=#id#
		]]>
	</delete>
    
    <select id="sampleDAO.selectSample" resultMap="sample">
        <![CDATA[
            SELECT
                ID, NAME, DESCRIPTION, USE_YN, REG_USER
            FROM SAMPLE 
            WHERE ID=#id#
        ]]>
    </select>
	
	<select id="sampleDAO.selectSampleList" parameterClass="searchVO" resultClass="egovMap">

			SELECT
				ID, NAME, DESCRIPTION, USE_YN, REG_USER
			FROM SAMPLE
			WHERE 1=1
			<isEqual prepend="AND" property="searchCondition" compareValue="0">
				ID LIKE '%' || #searchKeyword# || '%'
			</isEqual>
			<isEqual prepend="AND" property="searchCondition" compareValue="1">
				NAME LIKE '%' || #searchKeyword# || '%'
			</isEqual>
			ORDER BY ID DESC
			LIMIT #recordCountPerPage# OFFSET #firstIndex#		
	</select>
	
	<select id="sampleDAO.selectSampleListTotCnt" parameterClass="searchVO" resultClass="int">

			SELECT COUNT(*) totcnt
			FROM SAMPLE
			WHERE 1=1
			<isEqual prepend="AND" property="searchCondition" compareValue="0">
				ID LIKE '%' || #searchKeyword# || '%'
			</isEqual>
			<isEqual prepend="AND" property="searchCondition" compareValue="1">
				NAME LIKE '%' || #searchKeyword# || '%'
			</isEqual>
	</select>
	
	<!-- MAIN -->
	<!-- 최근 등록 영화 -->
	<select id="movDAO.recentlyAdded" resultClass="movieVO">
		<![CDATA[
			SELECT movie_id AS movieId
					, title_kr AS titleKr
					, title_er AS titleEn
					, backdrop_path AS backdropPath
					, poster_path AS posterPath
					, collection_id AS collectionId
					, genre AS genreDB
					, submit_date
			FROM movie_page
			ORDER BY submit_date DESC
			LIMIT 10
		]]>
	</select>
	<!-- 최근 등록 시리즈 -->
	<select id="movDAO.recentlyCollected" resultClass="collectionVO">
		<![CDATA[
			SELECT id
					, cname AS name
					, poster_path AS posterPath
					, backdrop_path AS backdropPath
					, overview
					, submit_date
			FROM collection
			WHERE id != 0
			ORDER BY submit_date DESC
			LIMIT 10
		]]>
	</select>
	
	<!-- SEARCH -->
	<!-- 영화 검색 -->
	<select id="movDAO.searchMovie" resultClass="movieVO">
	    <![CDATA[
	        SELECT movie_id AS movieId, title_kr AS titleKr, title_er AS titleEn, backdrop_path AS backdropPath, poster_path AS posterPath, collection_id AS collectionId, genre AS genreDB
	        FROM movie_page
	        WHERE (title_kr ILIKE '%' || #titleEn# || '%' OR title_er ILIKE '%' || #titleEn# || '%')
	    ]]>
	</select>
	<!-- 관련 영화 검색 -->
	<select id="movDAO.searchOverview" resultClass="movieVO">
	    <![CDATA[
	        SELECT movie_id AS movieId, title_kr AS titleKr, title_er AS titleEn, backdrop_path AS backdropPath, poster_path AS posterPath, collection_id AS collectionId, genre AS genreDB
	        FROM movie_page
	        WHERE (overview ILIKE '%' || #titleEn# || '%')
	    ]]>
	</select>
	<!-- 연기자 검색 -->
	<select id="movDAO.searchActor" resultClass="actorVO">
		<![CDATA[
			SELECT actor_id AS actorId
					, gender
					, act_name AS actName
					, profile_path AS profilePath
					, birthday
					, deathday
					, status
					, homeplace
			FROM actor
			WHERE (act_name ILIKE '%' || #actName# || '%')
		]]>
	</select>
	<!-- 시리즈 검색 -->
	<select id="movDAO.searchCollection" resultClass="collectionVO">
		<![CDATA[
			SELECT id
					, cname AS name
					, poster_path AS posterPath
					, backdrop_path AS backdropPath
					, overview
			FROM collection
			WHERE (cname ILIKE '%' || #name# || '%')
		]]>
	</select>

	<!-- 등록 -->
	<!-- 영화 삽입 -->
	<insert id="movDAO.insertMovie" parameterClass="movieVO">
		<![CDATA[
			INSERT INTO movie_page( movie_id
									, title_kr
									, title_er
									, genre
									, release_date
									, overview
									, backdrop_path
									, poster_path
									, collection_id
									, status
									, tagline
									, submit_date )
			VALUES ( #movieId#
					, #titleKr#
					, #titleEn#
					, #genreDB#
					, #releaseDate#
					, #overview#
					, #backdropPath#
					, #posterPath#
					, #collectionId#
					, #status#
					, #tagline#
					, CURRENT_TIMESTAMP )
					
		]]>
	</insert>
	<!-- 시리즈 삽입 -->
	<insert id="movDAO.insertCollection" parameterClass="collectionVO">
		<![CDATA[
			INSERT INTO collection( id
									, cname
									, poster_path
									, backdrop_path
									, overview
									, submit_date )
			VALUES ( #id#
					, #name#
					, #posterPath#
					, #backdropPath#
					, #overview#
					, CURRENT_TIMESTAMP )
		]]>
	</insert>
	<!-- 연기자 삽입 -->
	<insert id="movDAO.insertActor" parameterClass="actorVO">
		<![CDATA[
			INSERT INTO actor( actor_id
								, act_name
								, profile_path
								
								, birthday
								, deathday
								, gender
								, status
								, homeplace )
			VALUES ( #actorId#
					, #actName#
					, #profilePath#
					
					, #birthday#
					, #deathday#
					, #gender#
					, #status#
					, #homeplace# )
		]]>
	</insert>
	<!-- 연기자 SNS 계정 삽입 -->
	<insert id="movDAO.insertSns" parameterClass="actorSnsVO">
		<![CDATA[
			INSERT INTO actor_sns( actor_id
									, facebook
									, instagram
									, tiktok
									, twitter
									, youtube )
			VALUES( #actorId#
					, #facebook#
					, #instagram#
					, #tiktok#
					, #twitter#
					, #youtube# )
		]]>
	</insert>
	<!-- 시리즈 중복 확인 -->
	<select id="movDAO.checkCollection" resultClass="collectionVO">
		<![CDATA[
			SELECT id
					, cname AS name
					, poster_path AS posterPath
					, backdrop_path AS backdropPath
					, overview
			FROM collection
			WHERE id = #id#
		]]>
	</select>
	<!-- 배우 중복 확인 -->
	<select id="movDAO.checkActor" resultClass="actorVO">
		<![CDATA[
			SELECT actor_id AS actorId
					, act_name AS actorName
					, profile_path AS profilePath
			FROM actor
			WHERE actor_id = #actorId#
		]]>
	</select>
	<!-- 영화 중복 확인 -->
	<select id="movDAO.checkMovie" resultClass="int">
		<![CDATA[
			SELECT COUNT(movie_id)
			FROM movie_page
			WHERE movie_id = #movieId#
		]]>
	</select>
	
	<!-- 상세페이지 -->
	<!-- 영화 정보 불러오기 -->
	<select id="movDAO.selectMovie" resultClass="movieVO">
	    <![CDATA[
	        SELECT movie_id AS movieId
	        		, title_kr AS titleKr
	        		, title_er AS titleEn
	        		, backdrop_path AS backdropPath
	        		, poster_path AS posterPath
	        		, collection_id AS collectionId
	        		, genre AS genreDB
	        		, overview
	        		, release_date AS releaseDate
	        		, tagline
	        FROM movie_page
	        WHERE movie_id = #movieId#
	    ]]>
	</select>
	<!-- 시리즈 정보 불러오기 -->
	<select id="movDAO.selectCollection" resultClass="collectionVO">
		<![CDATA[
			SELECT id
					, cname AS name
					, poster_path AS posterPath
					, backdrop_path AS backdropPath
					, overview
			FROM collection
			WHERE id = #id# AND #id# != 0
		]]>
	</select>
	<!-- 시리즈 소속 영화 불러오기 -->
	<select id="movDAO.collectionMovie" resultClass="movieVO">
	    <![CDATA[
	        SELECT movie_id AS movieId
	        		, title_kr AS titleKr
	        		, title_er AS titleEn
	        		, backdrop_path AS backdropPath
	        		, poster_path AS posterPath
	        		, collection_id AS collectionId
	        		, genre AS genreDB
	        		, overview
	        		, release_date AS releaseDate
	        		, tagline
	        FROM movie_page
	        WHERE collection_id = #collectionId#
	        ORDER BY release_date
	    ]]>
	</select>
	<!-- 연기자 정보 불러오기 -->
	<select id="movDAO.actorDetail" resultClass="actorVO">
		<![CDATA[
			SELECT actor_id AS actorId
					, gender
					, act_name AS actName
					, profile_path AS profilePath
					, birthday
					, deathday
					, status
					, homeplace
			FROM actor
			WHERE actor_id = #actorId#
		]]>
	</select>
	<!-- 연기자 sns 불러오기 -->
	<select id="movDAO.snsDetail" resultClass="actorSnsVO">
		<![CDATA[
			SELECT actor_id AS actorId
					, facebook
					, instagram
					, tiktok
					, twitter
					, youtube
			FROM actor_sns
			WHERE actor_id = #actorId#
		]]>
	</select>
	<!-- 관람평 작성 -->
	<insert id="movDAO.insertReview" parameterClass="reviewVO">
		<![CDATA[
			INSERT INTO review (movie_id, user_id, rate, detail, submit_time, like_cnt, dislike_cnt)
			VALUES( #movieId#
					, #userId#
					, #rate#
					, #detail#
					, CURRENT_TIMESTAMP
					, 0
					, 0)
		]]>
	</insert>
	<!-- 관람평 조회 -->
	<select id="movDAO.selectReview" resultClass="reviewVO">
		<![CDATA[
			SELECT review_id AS reviewID
					, movie_id AS movieId
					, user_id AS userId
					, rate
					, detail
					, submit_time AS submitTime
					, like_cnt AS likeCnt
					, dislike_cnt AS dislikeCnt
			FROM review
			WHERE movie_id = #movieId#
			ORDER BY submit_time DESC
		]]>
	</select>
	<!-- 시리즈 댓글 작성 -->
	<insert id="movDAO.insertSeriesReview" parameterClass="reviewVO">
		<![CDATA[
			INSERT INTO series_review (series_id, user_id, rate, detail, submit_time, like_cnt, dislike_cnt)
			VALUES( #seriesId#
					, #userId#
					, #rate#
					, #detail#
					, CURRENT_TIMESTAMP
					, 0
					, 0)
		]]>
	</insert>
	<!-- 시리즈 댓글 조회 -->
	<select id="movDAO.selectSeriesReview" resultClass="reviewVO">
		<![CDATA[
			SELECT review_id AS reviewID
					, series_id AS seriesId
					, user_id AS userId
					, rate
					, detail
					, submit_time AS submitTime
					, like_cnt AS likeCnt
					, dislike_cnt AS dislikeCnt
			FROM series_review
			WHERE series_id = #seriesId#
			ORDER BY submit_time DESC
		]]>
	</select>
	<!-- 배우 응원 글 -->
	<insert id="movDAO.insertActorReview" parameterClass="reviewVO">
		<![CDATA[
			INSERT INTO actor_review (actor_id, user_id, detail, submit_time, like_cnt, dislike_cnt)
			VALUES (#actorId#
					, #userId#
					, #detail#
					, CURRENT_TIMESTAMP
					, 0
					, 0)
		]]>
	</insert>
	<!-- 배우 응원 글 조회 -->
	<select id="movDAO.selectActorReview" resultClass="reviewVO">
		<![CDATA[
			SELECT review_id AS reviewId
					, actor_id AS actorId
					, user_id AS userId
					, detail
					, submit_time AS submitTime
					, like_cnt AS likeCnt
					, dislike_cnt AS dislikeCnt
			FROM actor_review
			WHERE actor_id = #actorId#
			ORDER BY submit_time DESC
		]]>
	</select>
	<!-- 즐겨찾기 등록 -->
	<insert id="movDAO.insertLike" parameterClass="likeVO">
		<![CDATA[
			INSERT INTO movie_like (user_id, movie_id, submit_time)
			VALUES( #userId#, #movieId#, CURRENT_TIMESTAMP)
		]]>
	</insert>
	<!-- 즐겨찾기 제거 -->
	<delete id="movDAO.deleteLike">
		<![CDATA[
			DELETE FROM movie_like
			WHERE user_id = #userId# AND movie_id = #movieId#
		]]>
	</delete>
	<!-- 즐겨찾기 확인 -->
	<select id="movDAO.selectLike" resultClass="int">
		<![CDATA[
			SELECT COUNT(*)
			FROM movie_like
			WHERE user_id = #userId# AND movie_id = #movieId#
		]]>
	</select>
	<!-- 영화 정보 업데이트 -->
	<update id="movDAO.movieUpdate" parameterClass="movieVO">
		<![CDATA[
			UPDATE movie_page
			SET title_kr = #titleKr#
				, title_er = #titleEn#
				, release_date = #releaseDate#
				, overview = #overview#
				, backdrop_path = #backdropPath#
				, poster_path = #posterPath#
				, status = #status#
				, tagline = #tagline#
				, submit_date = CURRENT_TIMESTAMP
			WHERE movie_id = #movieId#
		]]>
	</update>
	<!-- 시리즈 정보 업데이트 -->
	<update id="movDAO.seriesUpdate" parameterClass="collectionVO">
		<![CDATA[
			UPDATE collection
			SET cname = #name#
				, poster_path = #posterPath#
				, backdrop_path = #backdropPath#
				, overview = #overview#
				, submit_date = CURRENT_TIMESTAMP
			WHERE id = #id#
		]]>
	</update>
	<!-- 배우 정보 업데이트 -->
	<update id="movDAO.actorUpdate" parameterClass="actorVO">
		<![CDATA[
			UPDATE actor
			SET profile_path = #profilePath#
				, deathday = #deathday#
				, status = #status#
				, homeplace = #homeplace#
			WHERE actor_id = #actorId#
		]]>
	</update>
	<update id="movDAO.actorSnsUpdate" parameterClass="actorSnsVO">
		<![CDATA[
			UPDATE actor_sns
			SET facebook = #facebook#
				, instagram = #instagram#
				, tiktok = #tiktok#
				, twitter = #twitter#
				, youtube = #youtube#
			WHERE actor_id = #actorId#
		]]>
	</update>
	<!-- 시리즈 이름 찾기 -->
	<select id="movDAO.findSeriesByName" resultClass="movieVO">
		<![CDATA[
			SELECT m.movie_id AS movieId, c.cname, c.id AS collectionId
			FROM movie_page AS m LEFT JOIN collection AS c
			ON m.collection_id = c.id
			WHERE m.movie_id = #movieId#
		]]>
	</select>
	<!-- 계정 관리 -->
	<!-- 회원 가입 -->
	<insert id="movDAO.registerMember" parameterClass="memberVO">
		<![CDATA[
			INSERT INTO member (id, pass, name, email, levels, enabled, mail_key, mail_auth)
			VALUES ( #id#
					, #pass#
					, #name#
					, #email#
					, 'ROLE_USER'
					, '1'
					, #mailKey#
					,'0' )
		]]>
	</insert>
	<!-- ID 중복 확인 -->
	<select id="movDAO.checkId" resultClass="int">
		<![CDATA[
			SELECT COUNT(id)
			FROM member
			WHERE id = #id#
		]]>
	</select>
	<!-- 이메일 중복 확인 -->
	<select id="movDAO.checkEmail" resultClass="int">
		<![CDATA[
			SELECT COUNT(email)
			FROM member
			WHERE email = #email#
		]]>
	</select>
	<!-- 인증 랜덤 번호 저장 -->
	<update id="movDAO.updateMailKey" parameterClass="memberVO">
		<![CDATA[
			UPDATE member set mail_key=#mailKey#
			WHERE email = #email# AND id=#id#
		]]>
	</update>
	<!-- 메일 인증 업데이트 -->
	<update id="movDAO.updateMailAuth" parameterClass="memberVO">
		<![CDATA[
			UPDATE member set mail_auth=1
			WHERE email = #email# AND mail_key=#mailKey#
		]]>
	</update>
	<!-- 메일 인증 확인 -->
	<select id="movDAO.emailAuthFail" parameterClass="String" resultClass="int">
		<![CDATA[
			SELECT COUNT(*)
			FROM member
			WHERE id=#id# AND mail_auth=1
		]]>
	</select>
	<!-- 인증번호 확인 -->
	<select id="movDAO.verify" resultClass="int">
		<![CDATA[
			SELECT COUNT(*)
			FROM member
			WHERE email=#email# AND mail_key=#mailKey#
		]]>
	</select>
	<!-- 인증 여부 확인 -->
	<select id="movDAO.verifyCheck" resultClass="int">
		<![CDATA[
			SELECT COUNT(*)
			FROM member
			WHERE email=#email# AND mail_auth = '1'
		]]>
	</select>
	<!-- 비밀번호 업데이트 -->
	<update id="movDAO.updatePassword" parameterClass="memberVO">
		<![CDATA[
			UPDATE member set pass=#pass#
			WHERE id = #id#
		]]>
	</update>
	<!-- 이메일 업데이트 -->
	<update id="movDAO.updateEmail" parameterClass="memberVO">
		<![CDATA[
			UPDATE member set email=#email#, mail_key=#mailKey#, mail_auth=#mailAuth#
			Where id=#id#
		]]>
	</update>
	<!-- 계정 정보 찾기 -->
	<select id="movDAO.searchAcc" resultClass="memberVO">
		<![CDATA[
			SELECT id, pass, name, email
			FROM member
			WHERE id=#id#
		]]>
	</select>
	<!-- 아이디 찾기 -->
	<select id="movDAO.findId" resultClass="String">
		<![CDATA[
			SELECT id
			FROM member
			WHERE name=#name# AND email=#email#
		]]>
	</select>
	<!-- 비밀번호 찾기 -->
	<select id="movDAO.findPass" resultClass="int">
		<![CDATA[
			SELECT COUNT(id)
			FROM member
			WHERE id=#id# AND email=#email#
		]]>
	</select>
	<!-- 회원 탈퇴 -->
	<delete id="movDAO.deleteAcc">
		<![CDATA[
			DELETE FROM member
			WHERE id = #id#
		]]>
	</delete>
	
	<!-- 마이페이지 -->
	<!-- 댓글 확인 -->
	<select id="movDAO.checkReview" resultClass="reviewVO">
		<![CDATA[
			SELECT r.review_id AS reviewID
					, r.movie_id AS movieId
					, r.user_id AS userId
					, r.rate
					, r.detail
					, r.submit_time AS submitTime
					, r.like_cnt AS likeCnt
					, r.dislike_cnt AS dislikeCnt
					, m.poster_path AS posterPath
			FROM review r
			JOIN movie_page m ON r.movie_id = m.movie_id
			WHERE r.user_id = #userId#
			ORDER BY r.submit_time DESC
			LIMIT 3
		]]>
	</select>
	<select id="movDAO.selectAllReview" resultClass="reviewVO">
		<![CDATA[
			SELECT r.review_id AS reviewID
					, r.movie_id AS movieId
					, r.user_id AS userId
					, r.rate
					, r.detail
					, r.submit_time AS submitTime
					, r.like_cnt AS likeCnt
					, r.dislike_cnt AS dislikeCnt
					, m.poster_path AS posterPath
					, m.title_er AS name
			FROM review r
			JOIN movie_page m ON r.movie_id = m.movie_id
			WHERE r.user_id = #userId#
			ORDER BY r.submit_time DESC
		]]>
	</select>
	<select id="movDAO.selectAllSeriesReview" resultClass="reviewVO">
		<![CDATA[
			SELECT r.review_id AS reviewID
					, r.series_id AS seriesId
					, r.user_id AS userId
					, r.rate
					, r.detail
					, r.submit_time AS submitTime
					, r.like_cnt AS likeCnt
					, r.dislike_cnt AS dislikeCnt
					, c.poster_path AS posterPath
					, c.cname
			FROM series_review r
			JOIN collection c ON r.series_id = c.id
			WHERE r.user_id = #userId#
			ORDER BY r.submit_time DESC
		]]>
	</select>
	<select id="movDAO.selectAllActorReview" resultClass="reviewVO">
		<![CDATA[
			SELECT r.review_id AS reviewID
					, r.actor_id AS actorId
					, r.user_id AS userId
					, r.detail
					, r.submit_time AS submitTime
					, r.like_cnt AS likeCnt
					, r.dislike_cnt AS dislikeCnt
					, a.profile_path AS profilePath
					, a.act_name AS actName
			FROM actor_review r
			JOIN actor a ON r.actor_id = a.actor_id
			WHERE r.user_id = #userId#
			ORDER BY r.submit_time DESC
		]]>
	</select>
	<!-- 좋아요 영화 조회 -->
	<select id="movDAO.checkLike" resultClass="likeVO">
		<![CDATA[
			SELECT l.like_id AS likeId
				, l.user_id AS userId
				, l.movie_id AS movieId
				, l.submit_time AS submitTime
				, m.poster_path AS posterPath
				, m.title_er AS title
			FROM movie_like l JOIN movie_page m on l.movie_id = m.movie_id
			WHERE l.user_id = #userId#
			ORDER BY l.submit_time DESC
			LIMIT 5
		]]>
	</select>
	<select id="movDAO.selectAllLike" resultClass="likeVO">
		<![CDATA[
			SELECT l.like_id AS likeId
				, l.user_id AS userId
				, l.movie_id AS movieId
				, l.submit_time AS submitTime
				, m.poster_path AS posterPath
				, m.title_er AS title
			FROM movie_like l JOIN movie_page m on l.movie_id = m.movie_id
			WHERE l.user_id = #userId#
			ORDER BY l.submit_time DESC
		]]>
	</select>
	<!-- 영화 댓글 삭제 -->
	<delete id="movDAO.deleteMovieComment">
		<![CDATA[
			DELETE FROM review
			WHERE review_id = #reviewId#
		]]>
	</delete>
	<!-- 시리즈 댓글 삭제 -->
	<delete id="movDAO.deleteSeriesComment">
		<![CDATA[
			DELETE FROM series_review
			WHERE review_id = #reviewId#
		]]>
	</delete>
	<!-- 응원 글 삭제 -->
	<delete id="movDAO.deleteActorComment">
		<![CDATA[
			DELETE FROM actor_review
			WHERE review_id = #reviewId#
		]]>
	</delete>
	<!-- 프로필 경로 조회 -->
	<select id="movDAO.profileRoot" resultClass="memberVO">
		<![CDATA[
			SELECT profile
			FROM member
			WHERE id=#id#
		]]>
	</select>
	<!-- 프로필 경로 업데이트 -->
	<update id="movDAO.updateProfile" parameterClass="memberVO">
		<![CDATA[
			UPDATE member set profile=#profile#
			WHERE id=#id#
		]]>
	</update>
	
	<!-- 영화 리스트 업 -->
	<!-- 전체 영화 조회 -->
	<select id="movDAO.selectAllMovie" resultClass="movieVO">
		<![CDATA[
			SELECT movie_id AS movieId
	        		, title_kr AS titleKr
	        		, title_er AS titleEn
	        		, backdrop_path AS backdropPath
	        		, poster_path AS posterPath
	        		, collection_id AS collectionId
	        		, genre AS genreDB
	        		, overview
	        		, release_date AS releaseDate
	        		, tagline
	        FROM movie_page
	        ORDER BY title_er
		]]>
	</select>
	<!-- 장르 리스트 조회 -->
	<select id="movDAO.getGenre" resultClass="genreVO">
		<![CDATA[
			SELECT id, name, update_time AS updateTime
			FROM genre
			ORDER BY name
		]]>
	</select>
	<!-- 장르별 검색 -->
	<select id="movDAO.searchByGenre" resultClass="movieVO">
		<![CDATA[
			SELECT movie_id AS movieId
	        		, title_kr AS titleKr
	        		, title_er AS titleEn
	        		, backdrop_path AS backdropPath
	        		, poster_path AS posterPath
	        		, collection_id AS collectionId
	        		, genre AS genreDB
	        		, overview
	        		, release_date AS releaseDate
	        		, tagline
			FROM movie_page
			WHERE (genre ILIKE '%' || #genreDB# || '%')
			ORDER BY titleEn
		]]>
	</select>
	<!-- 시리즈 리스트 조회 -->
	<select id="movDAO.seriesList" resultClass="collectionVO">
		<![CDATA[
				SELECT id
						, cname AS name
						, poster_path AS posterPath
						, backdrop_path AS backdropPath
						, overview
						, submit_date
				FROM collection
				ORDER by cname
			]]>
	</select>
	
	<!-- 관리자 페이지 -->
	<!-- 전체 회원 조회 -->
	<select id="movDAO.searchAllUsers" resultClass="memberVO">
		<![CDATA[
			SELECT id, levels, enabled, name, email, mail_auth AS mailAuth
			FROM member
		]]>
	</select>
	<!-- 관리자 계정 조회 -->
	<select id="movDAO.searchAllAdmin" resultClass="memberVO">
		<![CDATA[
			SELECT id, levels, enabled, name, email, mail_auth AS mailAuth
			FROM member
			WHERE levels = 'ROLE_ADMIN'
		]]>
	</select>
	<!-- 회원 상세 정보 조회 -->
	<select id="movDAO.searchUserDetail" resultClass="memberVO">
		<![CDATA[
			SELECT id, levels, enabled, name, email, mail_auth AS mailAuth
			FROM member
			WHERE id=#id#
		]]>
	</select>
	<!-- 관리자 권한 부여 -->
	<update id="movDAO.upgradeToAdmin">
		<![CDATA[
			UPDATE member
			SET levels='ROLE_ADMIN'
			WHERE id=#id#
		]]>
	</update>
	<!-- 관리자 권한 회수 -->
	<update id="movDAO.downToUser">
		<![CDATA[
			UPDATE member
			SET levels='ROLE_USER'
			WHERE id=#id#
		]]>
	</update>
	<!-- 관리자 확인 -->
	<select id="movDAO.checkAdmin" resultClass="int">
		<![CDATA[
			SELECT count(levels)
			FROM member
			WHERE levels='ROLE_ADMIN' AND id=#id#
		]]>
	</select>
	
	<!-- 시스템 로그 -->
	<!-- 로그 추가 -->
	<insert id="movDAO.insertLog" parameterClass="logVO">
		<![CDATA[
			INSERT INTO acc_log (user_id, log_type, log_detail, report_time)
			VALUES ( #userId#
					, #logType#
					, #logDetail#
					, CURRENT_TIMESTAMP)
		]]>
	</insert>
	<!-- 계정 별 로그 조회 -->
	<select id="movDAO.searchAccLog" resultClass="logVO">
		<![CDATA[
			SELECT log_id AS logId, user_id AS userId, log_type AS logType, log_detail AS logDetail, report_time AS reportTime
			FROM acc_log
			WHERE user_id = #userId#
			ORDER BY report_time DESC
		]]>
	</select>
	<!-- 로그 가이드 조회 -->
	<select id="movDAO.logCategory" resultClass="logVO">
		<![CDATA[
			SELECT id, type_name AS typeName, type_description AS typeDescription
			FROM logg
			ORDER BY id
		]]>
	</select>
</sqlMap>
